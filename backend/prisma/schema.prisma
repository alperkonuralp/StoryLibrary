// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  EDITOR
  USER
}

enum StoryStatus {
  DRAFT
  PUBLISHED
}

enum ReadingStatus {
  STARTED
  COMPLETED
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  username      String?        @unique
  passwordHash  String?
  role          UserRole       @default(USER)
  profile       Json?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  stories       Story[]        @relation("StoryCreator")
  ratings       UserStoryRating[]
  progress      UserReadingProgress[]
  bookmarks     UserBookmark[]
  preferences   UserPreferences?
  
  // Follow relationships
  following     UserFollow[]   @relation("UserFollows")
  followers     UserFollow[]   @relation("UserFollowers")
  
  @@index([email])
  @@index([username])
  @@index([role])
}

model Story {
  id                String         @id @default(uuid())
  title             Json           // {"en": "Title", "tr": "Başlık"}
  shortDescription  Json           // {"en": "Description", "tr": "Açıklama"}
  slug              String         @unique
  content           Json           // {"en": ["para1", "para2"], "tr": ["para1", "para2"]}
  status            StoryStatus    @default(DRAFT)
  sourceInfo        Json?          // {"siteName": "...", "originalUrl": "...", "scrapedAt": "..."}
  statistics        Json?          // {"wordCount": {"en": 150, "tr": 140}, ...}
  editorRating      Decimal?       @db.Decimal(3, 2)
  averageRating     Decimal?       @db.Decimal(3, 2)
  ratingCount       Int            @default(0)
  metadata          Json?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  publishedAt       DateTime?
  createdBy         String
  creator           User           @relation("StoryCreator", fields: [createdBy], references: [id])
  
  authors           StoryAuthor[]
  categories        StoryCategory[]
  tags              StoryTag[]
  series            StorySeries[]
  ratings           UserStoryRating[]
  progress          UserReadingProgress[]
  bookmarks         UserBookmark[]
  analytics         StoryAnalytics?
  
  @@index([slug])
  @@index([status])
  @@index([publishedAt])
  @@index([averageRating])
  @@index([ratingCount])
  @@index([createdAt])
  @@index([status, publishedAt])
  @@index([status, averageRating])
  @@index([status, createdAt])
  @@index([createdBy])
}

model Author {
  id            String         @id @default(uuid())
  name          String
  bio           Json?          // {"en": "Biography", "tr": "Biyografi"}
  slug          String         @unique
  createdAt     DateTime       @default(now())
  
  stories       StoryAuthor[]
  
  @@index([slug])
  @@index([name])
  @@index([createdAt])
}

model Category {
  id            String         @id @default(uuid())
  name          Json           // {"en": "Name", "tr": "İsim"}
  description   Json?
  slug          String         @unique
  createdAt     DateTime       @default(now())
  
  stories       StoryCategory[]
  
  @@index([slug])
}

model Tag {
  id            String         @id @default(uuid())
  name          Json           // {"en": "Name", "tr": "İsim"}
  slug          String         @unique
  color         String?
  createdAt     DateTime       @default(now())
  
  stories       StoryTag[]
  
  @@index([slug])
}

model Series {
  id            String         @id @default(uuid())
  name          Json           // {"en": "Name", "tr": "İsim"}
  description   Json?
  slug          String         @unique
  createdAt     DateTime       @default(now())
  
  stories       StorySeries[]
  
  @@index([slug])
}

// Relation Tables
model StoryAuthor {
  storyId       String
  authorId      String
  role          String         @default("author") // 'author', 'co-author', 'translator'
  story         Story          @relation(fields: [storyId], references: [id], onDelete: Cascade)
  author        Author         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  @@id([storyId, authorId])
  @@index([authorId])
  @@index([storyId])
  @@index([role])
}

model StoryCategory {
  storyId       String
  categoryId    String
  story         Story          @relation(fields: [storyId], references: [id], onDelete: Cascade)
  category      Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@id([storyId, categoryId])
  @@index([categoryId])
  @@index([storyId])
}

model StoryTag {
  storyId       String
  tagId         String
  story         Story          @relation(fields: [storyId], references: [id], onDelete: Cascade)
  tag           Tag            @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@id([storyId, tagId])
  @@index([tagId])
  @@index([storyId])
}

model StorySeries {
  storyId       String
  seriesId      String
  orderInSeries Int
  story         Story          @relation(fields: [storyId], references: [id], onDelete: Cascade)
  series        Series         @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  
  @@id([storyId, seriesId])
  @@index([seriesId])
  @@index([storyId])
  @@index([orderInSeries])
}

model UserStoryRating {
  id            String         @id @default(uuid())
  userId        String
  storyId       String
  rating        Decimal        @db.Decimal(3, 2)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  story         Story          @relation(fields: [storyId], references: [id], onDelete: Cascade)
  
  @@unique([userId, storyId])
  @@index([storyId])
  @@index([userId])
  @@index([rating])
  @@index([createdAt])
  @@index([storyId, rating])
}

model UserReadingProgress {
  id                    String         @id @default(uuid())
  userId                String
  storyId               String
  status                ReadingStatus
  lastParagraph         Int?
  totalParagraphs       Int?           // Total paragraphs in story
  completionPercentage  Decimal?       @db.Decimal(5, 2) // 0.00 to 100.00
  readingTimeSeconds    Int?           // Total time spent reading in seconds
  wordsRead             Int?           // Approximate words read
  language              String?        // Which language was being read (en/tr)
  startedAt             DateTime       @default(now())
  completedAt           DateTime?
  lastReadAt            DateTime?      // Last time user read this story
  
  user                  User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  story                 Story          @relation(fields: [storyId], references: [id], onDelete: Cascade)
  
  @@unique([userId, storyId])
  @@index([userId])
  @@index([storyId])
  @@index([status])
  @@index([lastReadAt])
}

model UserBookmark {
  id            String         @id @default(uuid())
  userId        String
  storyId       String
  createdAt     DateTime       @default(now())
  
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  story         Story          @relation(fields: [storyId], references: [id], onDelete: Cascade)
  
  @@unique([userId, storyId])
  @@index([userId])
  @@index([storyId])
}

model UserFollow {
  id              String         @id @default(uuid())
  followerId      String         // User who follows
  followedId      String         // User being followed (author)
  createdAt       DateTime       @default(now())
  
  follower        User           @relation("UserFollows", fields: [followerId], references: [id], onDelete: Cascade)
  followed        User           @relation("UserFollowers", fields: [followedId], references: [id], onDelete: Cascade)
  
  @@unique([followerId, followedId])
  @@index([followerId])
  @@index([followedId])
}

model StoryAnalytics {
  id                    String         @id @default(uuid())
  storyId               String
  viewsCount            Int            @default(0)
  uniqueReadersCount    Int            @default(0)
  completionRate        Decimal?       @db.Decimal(5, 2) // Percentage of users who complete
  averageReadingTime    Int?           // Average reading time in seconds
  averageRating         Decimal?       @db.Decimal(3, 2)
  popularLanguage       String?        // Which language is read more (en/tr)
  lastCalculated        DateTime       @default(now())
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  
  story                 Story          @relation(fields: [storyId], references: [id], onDelete: Cascade)
  
  @@unique([storyId])
  @@index([viewsCount])
  @@index([completionRate])
}

model UserPreferences {
  id                    String         @id @default(uuid())
  userId                String         @unique
  readingMode           String         @default("bilingual") // "bilingual", "english", "turkish"
  fontSize              String         @default("medium") // "small", "medium", "large"
  theme                 String         @default("light") // "light", "dark"
  languagePreference    String         @default("en") // "en", "tr"
  autoSaveProgress      Boolean        @default(true)
  emailNotifications    Boolean        @default(true)
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  
  user                  User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}