name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Run frontend linting
      run: |
        cd frontend
        npm run lint

    - name: Run frontend type checking
      run: |
        cd frontend
        npm run type-check

    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false

    - name: Build frontend
      run: |
        cd frontend
        npm run build

    - name: Upload frontend coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./frontend/coverage
        flags: frontend

  test-backend:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_story_library
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install backend dependencies
      run: |
        cd backend
        npm ci

    - name: Run backend linting
      run: |
        cd backend
        npm run lint

    - name: Setup test database
      run: |
        cd backend
        npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_story_library

    - name: Run backend tests
      run: |
        cd backend
        npm test -- --coverage
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_story_library
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret-key
        JWT_REFRESH_SECRET: test-refresh-secret

    - name: Build backend
      run: |
        cd backend
        npm run build

    - name: Upload backend coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./backend/coverage
        flags: backend

  integration-tests:
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_story_library
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci

    - name: Setup database
      run: |
        cd backend
        npx prisma migrate deploy
        npx prisma db seed
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_story_library

    - name: Start backend server
      run: |
        cd backend
        npm start &
        sleep 10
      env:
        NODE_ENV: production
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_story_library
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret-key
        JWT_REFRESH_SECRET: test-refresh-secret
        PORT: 3001

    - name: Build and start frontend
      run: |
        cd frontend
        npm run build
        npm start &
        sleep 10
      env:
        NEXT_PUBLIC_API_URL: http://localhost:3001/api

    - name: Run integration tests
      run: |
        cd backend
        npm run test -- --testPathPattern="integration"
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_story_library

  security-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Run security audit - Frontend
      run: |
        cd frontend
        npm audit --audit-level moderate

    - name: Run security audit - Backend
      run: |
        cd backend
        npm audit --audit-level moderate